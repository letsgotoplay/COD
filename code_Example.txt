我将为您设计一个完整的信贷员晋升流程管理系统，基于Spring Web、JPA和Oracle数据库。首先，让我梳理一下核心需求和功能点。

## 1. 需求分析与系统架构

### 核心需求
1. 支持信贷员晋升流程定义及管理
2. 支持多种类型的审批节点：普通节点、并行审批、条件分支
3. 灵活的审批人配置：角色、指定用户、部门、动态表达式
4. 支持申请人在提交前预选部分审批人
5. 流程实例创建和执行
6. 审批流转及记录
7. 退回重做机制
8. 审批转交功能
9. 超时提醒和处理

### 系统架构

```
├── controller       // REST API 接口层
├── service          // 业务逻辑层
│   ├── impl         // 服务实现
│   └── engine       // 流程引擎
├── repository       // 数据访问层
├── entity           // 数据实体
├── dto              // 数据传输对象
├── enums            // 枚举定义
├── util             // 工具类
└── config           // 配置类
```

## 2. 实体类设计

根据提供的表结构，我们首先创建对应的实体类。

```java
// 流程定义实体
@Entity
@Table(name = "process_definition")
@Data
public class ProcessDefinition {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "process_def_seq")
    @SequenceGenerator(name = "process_def_seq", sequenceName = "process_def_seq", allocationSize = 1)
    private Long id;
    
    @Column(name = "process_code", nullable = false, length = 50, unique = true)
    private String processCode;
    
    @Column(name = "process_name", nullable = false, length = 100)
    private String processName;
    
    @Column(name = "process_type_code", nullable = false, length = 50)
    private String processTypeCode;
    
    @Column(name = "description", length = 500)
    private String description;
    
    @Column(name = "form_config", columnDefinition = "CLOB")
    private String formConfig;
    
    @Column(name = "timeout_days")
    private Integer timeoutDays;
    
    @Column(name = "status", nullable = false, length = 20)
    @Enumerated(EnumType.STRING)
    private ProcessStatus status;
    
    @Column(name = "created_by", nullable = false, length = 50)
    private String createdBy;
    
    @Column(name = "created_time", nullable = false)
    private LocalDateTime createdTime;
    
    @Column(name = "updated_by", length = 50)
    private String updatedBy;
    
    @Column(name = "updated_time")
    private LocalDateTime updatedTime;
    
    @Column(name = "is_deleted", nullable = false)
    private Boolean isDeleted = false;
    
    @OneToMany(mappedBy = "processDefinition", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<ApprovalNodeDefinition> nodes;
}

// 审批节点定义实体
@Entity
@Table(name = "approval_node_definition")
@Data
public class ApprovalNodeDefinition {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "node_def_seq")
    @SequenceGenerator(name = "node_def_seq", sequenceName = "node_def_seq", allocationSize = 1)
    private Long id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "process_definition_id", nullable = false)
    private ProcessDefinition processDefinition;
    
    @Column(name = "node_name", nullable = false, length = 100)
    private String nodeName;
    
    @Column(name = "node_type", nullable = false, length = 50)
    @Enumerated(EnumType.STRING)
    private NodeType nodeType;
    
    @Column(name = "approver_type", nullable = false, length = 50)
    @Enumerated(EnumType.STRING)
    private ApproverType approverType;
    
    @Column(name = "approval_strategy", nullable = false, length = 50)
    @Enumerated(EnumType.STRING)
    private ApprovalStrategy approvalStrategy;
    
    @Column(name = "timeout_hours")
    private Integer timeoutHours;
    
    @Column(name = "sequence_no", nullable = false)
    private Integer sequenceNo;
    
    @Column(name = "rework_node_id")
    private Long reworkNodeId;
    
    @Column(name = "condition_expression", length = 500)
    private String conditionExpression;
    
    @Column(name = "created_by", nullable = false, length = 50)
    private String createdBy;
    
    @Column(name = "created_time", nullable = false)
    private LocalDateTime createdTime;
    
    @Column(name = "updated_by", length = 50)
    private String updatedBy;
    
    @Column(name = "updated_time")
    private LocalDateTime updatedTime;
    
    @Column(name = "is_deleted", nullable = false)
    private Boolean isDeleted = false;
    
    @OneToMany(mappedBy = "node", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<NodeApproverDefinition> approvers;
}

// 节点审批人定义实体
@Entity
@Table(name = "node_approver_definition")
@Data
public class NodeApproverDefinition {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "node_approver_def_seq")
    @SequenceGenerator(name = "node_approver_def_seq", sequenceName = "node_approver_def_seq", allocationSize = 1)
    private Long id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "node_id", nullable = false)
    private ApprovalNodeDefinition node;
    
    @Column(name = "approver_type", nullable = false, length = 50)
    @Enumerated(EnumType.STRING)
    private ApproverType approverType;
    
    @Column(name = "approver_id", length = 100)
    private String approverId;
    
    @Column(name = "expression", length = 500)
    private String expression;
    
    @Column(name = "description", length = 255)
    private String description;
    
    @Column(name = "created_by", nullable = false, length = 50)
    private String createdBy;
    
    @Column(name = "created_time", nullable = false)
    private LocalDateTime createdTime;
    
    @Column(name = "updated_by", length = 50)
    private String updatedBy;
    
    @Column(name = "updated_time")
    private LocalDateTime updatedTime;
    
    @Column(name = "is_deleted", nullable = false)
    private Boolean isDeleted = false;
}

// 流程实例实体
@Entity
@Table(name = "process_instance")
@Data
public class ProcessInstance {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "process_inst_seq")
    @SequenceGenerator(name = "process_inst_seq", sequenceName = "process_inst_seq", allocationSize = 1)
    private Long id;
    
    @Column(name = "process_no", nullable = false, length = 50, unique = true)
    private String processNo;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "process_definition_id", nullable = false)
    private ProcessDefinition processDefinition;
    
    @Column(name = "officer_id")
    private Long officerId;
    
    @Column(name = "employee_id")
    private Long employeeId;
    
    @Column(name = "employee_name", length = 100)
    private String employeeName;
    
    @Column(name = "form_data", columnDefinition = "CLOB")
    private String formData;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "current_node_instance_id")
    private ProcessNodeInstance currentNodeInstance;
    
    @Column(name = "status", nullable = false, length = 20)
    @Enumerated(EnumType.STRING)
    private ProcessInstanceStatus status;
    
    @Column(name = "rework_count", nullable = false)
    private Integer reworkCount = 0;
    
    @Column(name = "apply_user_id", nullable = false)
    private Long applyUserId;
    
    @Column(name = "apply_user_name", nullable = false, length = 100)
    private String applyUserName;
    
    @Column(name = "apply_time", nullable = false)
    private LocalDateTime applyTime;
    
    @Column(name = "complete_time")
    private LocalDateTime completeTime;
    
    @Column(name = "effective_date")
    private LocalDate effectiveDate;
    
    @Column(name = "priority", length = 20)
    @Enumerated(EnumType.STRING)
    private ProcessPriority priority = ProcessPriority.NORMAL;
    
    @Column(name = "created_by", nullable = false, length = 50)
    private String createdBy;
    
    @Column(name = "created_time", nullable = false)
    private LocalDateTime createdTime;
    
    @Column(name = "updated_by", length = 50)
    private String updatedBy;
    
    @Column(name = "updated_time")
    private LocalDateTime updatedTime;
    
    @Column(name = "is_deleted", nullable = false)
    private Boolean isDeleted = false;
    
    @OneToMany(mappedBy = "processInstance", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<ProcessNodeInstance> nodeInstances;
}

// 流程节点实例实体
@Entity
@Table(name = "process_node_instance")
@Data
public class ProcessNodeInstance {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "node_inst_seq")
    @SequenceGenerator(name = "node_inst_seq", sequenceName = "node_inst_seq", allocationSize = 1)
    private Long id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "process_instance_id", nullable = false)
    private ProcessInstance processInstance;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "node_definition_id", nullable = false)
    private ApprovalNodeDefinition nodeDefinition;
    
    @Column(name = "node_name", nullable = false, length = 100)
    private String nodeName;
    
    @Column(name = "node_status", nullable = false, length = 50)
    @Enumerated(EnumType.STRING)
    private NodeInstanceStatus nodeStatus;
    
    @Column(name = "start_time")
    private LocalDateTime startTime;
    
    @Column(name = "end_time")
    private LocalDateTime endTime;
    
    @Column(name = "due_time")
    private LocalDateTime dueTime;
    
    @Column(name = "prev_node_instance_id")
    private Long prevNodeInstanceId;
    
    @Column(name = "created_by", nullable = false, length = 50)
    private String createdBy;
    
    @Column(name = "created_time", nullable = false)
    private LocalDateTime createdTime;
    
    @Column(name = "updated_by", length = 50)
    private String updatedBy;
    
    @Column(name = "updated_time")
    private LocalDateTime updatedTime;
    
    @OneToMany(mappedBy = "nodeInstance", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<NodeApproverInstance> approverInstances;
}

// 节点审批人实例实体
@Entity
@Table(name = "node_approver_instance")
@Data
public class NodeApproverInstance {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "approver_inst_seq")
    @SequenceGenerator(name = "approver_inst_seq", sequenceName = "approver_inst_seq", allocationSize = 1)
    private Long id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "node_instance_id", nullable = false)
    private ProcessNodeInstance nodeInstance;
    
    @Column(name = "approver_id", nullable = false)
    private Long approverId;
    
    @Column(name = "approver_name", nullable = false, length = 100)
    private String approverName;
    
    @Column(name = "approver_type", nullable = false, length = 50)
    @Enumerated(EnumType.STRING)
    private ApproverType approverType;
    
    @Column(name = "approval_status", nullable = false, length = 50)
    @Enumerated(EnumType.STRING)
    private ApprovalStatus approvalStatus;
    
    @Column(name = "assign_time", nullable = false)
    private LocalDateTime assignTime;
    
    @Column(name = "action_time")
    private LocalDateTime actionTime;
    
    @Column(name = "due_time")
    private LocalDateTime dueTime;
    
    @Column(name = "comments", length = 500)
    private String comments;
    
    @Column(name = "transferred_to_id")
    private Long transferredToId;
    
    @Column(name = "transferred_to_name", length = 100)
    private String transferredToName;
    
    @Column(name = "created_by", nullable = false, length = 50)
    private String createdBy;
    
    @Column(name = "created_time", nullable = false)
    private LocalDateTime createdTime;
    
    @Column(name = "updated_by", length = 50)
    private String updatedBy;
    
    @Column(name = "updated_time")
    private LocalDateTime updatedTime;
}

// 审批记录实体
@Entity
@Table(name = "approval_record")
@Data
public class ApprovalRecord {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "approval_record_seq")
    @SequenceGenerator(name = "approval_record_seq", sequenceName = "approval_record_seq", allocationSize = 1)
    private Long id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "process_instance_id", nullable = false)
    private ProcessInstance processInstance;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "node_instance_id", nullable = false)
    private ProcessNodeInstance nodeInstance;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "approver_instance_id")
    private NodeApproverInstance approverInstance;
    
    @Column(name = "approver_id")
    private Long approverId;
    
    @Column(name = "approver_name", length = 100)
    private String approverName;
    
    @Column(name = "action_type", nullable = false, length = 50)
    @Enumerated(EnumType.STRING)
    private ActionType actionType;
    
    @Column(name = "action_status", nullable = false, length = 50)
    @Enumerated(EnumType.STRING)
    private ActionStatus actionStatus;
    
    @Column(name = "action_comment", length = 500)
    private String actionComment;
    
    @Column(name = "action_time", nullable = false)
    private LocalDateTime actionTime;
    
    @Column(name = "target_approver_id")
    private Long targetApproverId;
    
    @Column(name = "target_approver_name", length = 100)
    private String targetApproverName;
    
    @Column(name = "created_by", nullable = false, length = 50)
    private String createdBy;
    
    @Column(name = "created_time", nullable = false)
    private LocalDateTime createdTime;
}

// 流程操作日志实体
@Entity
@Table(name = "process_operation_log")
@Data
public class ProcessOperationLog {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "operation_log_seq")
    @SequenceGenerator(name = "operation_log_seq", sequenceName = "operation_log_seq", allocationSize = 1)
    private Long id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "process_instance_id", nullable = false)
    private ProcessInstance processInstance;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "node_instance_id")
    private ProcessNodeInstance nodeInstance;
    
    @Column(name = "operation_type", nullable = false, length = 50)
    @Enumerated(EnumType.STRING)
    private OperationType operationType;
    
    @Column(name = "operator_id", nullable = false)
    private Long operatorId;
    
    @Column(name = "operator_name", nullable = false, length = 100)
    private String operatorName;
    
    @Column(name = "operation_time", nullable = false)
    private LocalDateTime operationTime;
    
    @Column(name = "operation_details", columnDefinition = "CLOB")
    private String operationDetails;
    
    @Column(name = "created_by", nullable = false, length = 50)
    private String createdBy;
    
    @Column(name = "created_time", nullable = false)
    private LocalDateTime createdTime;
}
```

## 3. 枚举类定义

```java
// 流程状态枚举
public enum ProcessStatus {
    ACTIVE,      // 激活状态
    DISABLED,    // 禁用状态
    ARCHIVED     // 归档状态
}

// 流程实例状态枚举
public enum ProcessInstanceStatus {
    DRAFT,       // 草稿
    IN_PROGRESS, // 进行中
    APPROVED,    // 已批准
    REJECTED,    // 已拒绝
    CANCELED,    // 已取消
    REWORK       // 重做
}

// 节点类型枚举
public enum NodeType {
    NORMAL,      // 普通节点
    PARALLEL,    // 并行节点
    CONDITIONAL  // 条件节点
}

// 审批人类型枚举
public enum ApproverType {
    ROLE,        // 角色
    USER,        // 用户
    DEPARTMENT,  // 部门
    HIERARCHY,   // 层级
    EXPRESSION   // 表达式
}

// 审批策略枚举
public enum ApprovalStrategy {
    ALL,         // 所有人通过
    ANY          // 任一人通过
}

// 节点实例状态枚举
public enum NodeInstanceStatus {
    PENDING,     // 待处理
    IN_PROGRESS, // 处理中
    APPROVED,    // 已批准
    REJECTED,    // 已拒绝
    CANCELED,    // 已取消
    REWORK       // 重做
}

// 审批状态枚举
public enum ApprovalStatus {
    PENDING,     // 待处理
    APPROVED,    // 已批准
    REJECTED,    // 已拒绝
    TRANSFERRED  // 已转交
}

// 操作类型枚举
public enum ActionType {
    APPROVE,     // 批准
    REJECT,      // 拒绝
    REWORK,      // 重做
    TRANSFER,    // 转交
    CANCEL,      // 取消
    REMIND       // 提醒
}

// 操作状态枚举
public enum ActionStatus {
    SUCCESS,     // 成功
    FAIL         // 失败
}

// 操作类型枚举
public enum OperationType {
    CREATE,      // 创建
    SUBMIT,      // 提交
    APPROVE,     // 批准
    REJECT,      // 拒绝
    REWORK,      // 重做
    TRANSFER,    // 转交
    CANCEL,      // 取消
    REMIND,      // 提醒
    TIMEOUT      // 超时
}

// 流程优先级枚举
public enum ProcessPriority {
    HIGH,        // 高优先级
    NORMAL,      // 正常优先级
    LOW          // 低优先级
}
```

## 4. 数据传输对象(DTO)

```java
// 流程定义DTO
@Data
public class ProcessDefinitionDTO {
    private Long id;
    private String processCode;
    private String processName;
    private String processTypeCode;
    private String description;
    private String formConfig;
    private Integer timeoutDays;
    private ProcessStatus status;
    private List<ApprovalNodeDefinitionDTO> nodes;
}

// 审批节点定义DTO
@Data
public class ApprovalNodeDefinitionDTO {
    private Long id;
    private String nodeName;
    private NodeType nodeType;
    private ApproverType approverType;
    private ApprovalStrategy approvalStrategy;
    private Integer timeoutHours;
    private Integer sequenceNo;
    private Long reworkNodeId;
    private String conditionExpression;
    private List<NodeApproverDefinitionDTO> approvers;
}

// 节点审批人定义DTO
@Data
public class NodeApproverDefinitionDTO {
    private Long id;
    private ApproverType approverType;
    private String approverId;
    private String expression;
    private String description;
}

// 流程申请DTO
@Data
public class ProcessApplyDTO {
    private Long processDefinitionId;
    private Long officerId;
    private Long employeeId;
    private String employeeName;
    private String formData;
    private LocalDate effectiveDate;
    private ProcessPriority priority;
    // 申请人预选的审批人列表
    private List<PreSelectedApproverDTO> preSelectedApprovers;
}

// 预选审批人DTO
@Data
public class PreSelectedApproverDTO {
    private Long nodeDefinitionId;
    private Long approverId;
    private String approverName;
}

// 审批动作DTO
@Data
public class ApprovalActionDTO {
    private Long processInstanceId;
    private Long nodeInstanceId;
    private Long approverInstanceId;
    private ActionType actionType;
    private String actionComment;
    private Long targetApproverId;  // 用于转交场景
    private String targetApproverName;  // 用于转交场景
}

// 流程实例DTO
@Data
public class ProcessInstanceDTO {
    private Long id;
    private String processNo;
    private String processName;
    private Long officerId;
    private Long employeeId;
    private String employeeName;
    private String formData;
    private ProcessInstanceStatus status;
    private Integer reworkCount;
    private Long applyUserId;
    private String applyUserName;
    private LocalDateTime applyTime;
    private LocalDateTime completeTime;
    private LocalDate effectiveDate;
    private ProcessPriority priority;
    private CurrentNodeDTO currentNode;
}

// 当前节点DTO
@Data
public class CurrentNodeDTO {
    private Long nodeInstanceId;
    private String nodeName;
    private NodeType nodeType;
    private NodeInstanceStatus status;
    private List<ApproverDTO> approvers;
}

// 审批人DTO
@Data
public class ApproverDTO {
    private Long approverInstanceId;
    private Long approverId;
    private String approverName;
    private ApprovalStatus approvalStatus;
    private LocalDateTime dueTime;
}

// 审批记录DTO
@Data
public class ApprovalRecordDTO {
    private Long id;
    private Long processInstanceId;
    private String nodeName;
    private Long approverId;
    private String approverName;
    private ActionType actionType;
    private String actionComment;
    private LocalDateTime actionTime;
    private String targetApproverName;
}
```

## 5. 存储库接口

```java
// 流程定义存储库
@Repository
public interface ProcessDefinitionRepository extends JpaRepository<ProcessDefinition, Long> {
    Optional<ProcessDefinition> findByProcessCode(String processCode);
    
    List<ProcessDefinition> findByStatusAndIsDeletedFalse(ProcessStatus status);
    
    @Query("SELECT pd FROM ProcessDefinition pd WHERE pd.processTypeCode = :typeCode AND pd.status = :status AND pd.isDeleted = false")
    List<ProcessDefinition> findActiveProcessesByType(@Param("typeCode") String typeCode, @Param("status") ProcessStatus status);
}

// 审批节点定义存储库
@Repository
public interface ApprovalNodeDefinitionRepository extends JpaRepository<ApprovalNodeDefinition, Long> {
    List<ApprovalNodeDefinition> findByProcessDefinitionIdOrderBySequenceNo(Long processDefinitionId);
    
    Optional<ApprovalNodeDefinition> findByProcessDefinitionIdAndSequenceNo(Long processDefinitionId, Integer sequenceNo);
}

// 节点审批人定义存储库
@Repository
public interface NodeApproverDefinitionRepository extends JpaRepository<NodeApproverDefinition, Long> {
    List<NodeApproverDefinition> findByNodeId(Long nodeId);
}

// 流程实例存储库
@Repository
public interface ProcessInstanceRepository extends JpaRepository<ProcessInstance, Long> {
    Optional<ProcessInstance> findByProcessNo(String processNo);
    
    List<ProcessInstance> findByApplyUserIdAndStatusIn(Long applyUserId, List<ProcessInstanceStatus> statuses);
    
    @Query("SELECT pi FROM ProcessInstance pi JOIN pi.currentNodeInstance ni JOIN ni.approverInstances ai " +
           "WHERE ai.approverId = :approverId AND ai.approvalStatus = :status AND pi.status = :processStatus")
    List<ProcessInstance> findPendingTasksByApproverId(
            @Param("approverId") Long approverId, 
            @Param("status") ApprovalStatus status, 
            @Param("processStatus") ProcessInstanceStatus processStatus);
    
    List<ProcessInstance> findByOfficerIdAndStatus(Long officerId, ProcessInstanceStatus status);
}

// 流程节点实例存储库
@Repository
public interface ProcessNodeInstanceRepository extends JpaRepository<ProcessNodeInstance, Long> {
    List<ProcessNodeInstance> findByProcessInstanceIdOrderByStartTimeDesc(Long processInstanceId);
    
    @Query("SELECT ni FROM ProcessNodeInstance ni " +
           "WHERE ni.processInstance.id = :processInstanceId AND ni.nodeStatus = :status")
    List<ProcessNodeInstance> findActiveNodesByProcessInstanceId(
            @Param("processInstanceId") Long processInstanceId, 
            @Param("status") NodeInstanceStatus status);
}

// 节点审批人实例存储库
@Repository
public interface NodeApproverInstanceRepository extends JpaRepository<NodeApproverInstance, Long> {
    List<NodeApproverInstance> findByNodeInstanceId(Long nodeInstanceId);
    
    List<NodeApproverInstance> findByNodeInstanceIdAndApprovalStatus(Long nodeInstanceId, ApprovalStatus status);
    
    List<NodeApproverInstance> findByApproverIdAndApprovalStatus(Long approverId, ApprovalStatus status);
    
    @Query("SELECT COUNT(ai) FROM NodeApproverInstance ai " +
           "WHERE ai.nodeInstance.id = :nodeInstanceId AND ai.approvalStatus = :status")
    Long countByNodeInstanceIdAndApprovalStatus(
            @Param("nodeInstanceId") Long nodeInstanceId, 
            @Param("status") ApprovalStatus status);
}

// 审批记录存储库
@Repository
public interface ApprovalRecordRepository extends JpaRepository<ApprovalRecord, Long> {
    List<ApprovalRecord> findByProcessInstanceIdOrderByActionTimeDesc(Long processInstanceId);
    
    List<ApprovalRecord> findByNodeInstanceIdOrderByActionTimeDesc(Long nodeInstanceId);
}

// 流程操作日志存储库
@Repository
public interface ProcessOperationLogRepository extends JpaRepository<ProcessOperationLog, Long> {
    List<ProcessOperationLog> findByProcessInstanceIdOrderByOperationTimeDesc(Long processInstanceId);
}
```

## 6. 服务接口和实现

### 流程定义管理服务

```java
// 流程定义服务接口
public interface ProcessDefinitionService {
    ProcessDefinitionDTO createProcessDefinition(ProcessDefinitionDTO definitionDTO);
    
    ProcessDefinitionDTO updateProcessDefinition(Long id, ProcessDefinitionDTO definitionDTO);
    
    void deleteProcessDefinition(Long id);
    
    ProcessDefinitionDTO getProcessDefinition(Long id);
    
    List<ProcessDefinitionDTO> getAllActiveProcessDefinitions();
    
    List<ProcessDefinitionDTO> getProcessDefinitionsByType(String typeCode);
    
    void activateProcessDefinition(Long id);
    
    void deactivateProcessDefinition(Long id);
}

// 流程定义服务实现
@Service
@Transactional
public class ProcessDefinitionServiceImpl implements ProcessDefinitionService {
    private final ProcessDefinitionRepository processDefinitionRepository;
    private final ApprovalNodeDefinitionRepository nodeDefinitionRepository;
    private final NodeApproverDefinitionRepository approverDefinitionRepository;
    private final ModelMapper modelMapper;
    
    public ProcessDefinitionServiceImpl(
            ProcessDefinitionRepository processDefinitionRepository,
            ApprovalNodeDefinitionRepository nodeDefinitionRepository,
            NodeApproverDefinitionRepository approverDefinitionRepository) {
        this.processDefinitionRepository = processDefinitionRepository;
        this.nodeDefinitionRepository = nodeDefinitionRepository;
        this.approverDefinitionRepository = approverDefinitionRepository;
        this.modelMapper = new ModelMapper();
        configureModelMapper();
    }
    
    private void configureModelMapper() {
        // 配置映射器，处理实体与DTO之间的转换
    }
    
    @Override
    public ProcessDefinitionDTO createProcessDefinition(ProcessDefinitionDTO definitionDTO) {
        // 验证流程编码唯一性
        if (processDefinitionRepository.findByProcessCode(definitionDTO.getProcessCode()).isPresent()) {
            throw new BusinessException("流程编码已存在: " + definitionDTO.getProcessCode());
        }
        
        // 转换DTO为实体
        ProcessDefinition definition = modelMapper.map(definitionDTO, ProcessDefinition.class);
        definition.setCreatedBy(getCurrentUser());
        definition.setCreatedTime(LocalDateTime.now());
        definition.setStatus(ProcessStatus.ACTIVE);
        definition.setIsDeleted(false);
        
        // 保存流程定义
        ProcessDefinition savedDefinition = processDefinitionRepository.save(definition);
        
        // 保存节点定义
        if (definitionDTO.getNodes() != null) {
            List<ApprovalNodeDefinition> nodes = new ArrayList<>();
            for (ApprovalNodeDefinitionDTO nodeDTO : definitionDTO.getNodes()) {
                ApprovalNodeDefinition node = modelMapper.map(nodeDTO, ApprovalNodeDefinition.class);
                node.setProcessDefinition(savedDefinition);
                node.setCreatedBy(getCurrentUser());
                node.setCreatedTime(LocalDateTime.now());
                node.setIsDeleted(false);
                
                ApprovalNodeDefinition savedNode = nodeDefinitionRepository.save(node);
                
                // 保存审批人定义
                if (nodeDTO.getApprovers() != null) {
                    for (NodeApproverDefinitionDTO approverDTO : nodeDTO.getApprovers()) {
                        NodeApproverDefinition approver = modelMapper.map(approverDTO, NodeApproverDefinition.class);
                        approver.setNode(savedNode);
                        approver.setCreatedBy(getCurrentUser());
                        approver.setCreatedTime(LocalDateTime.now());
                        approver.setIsDeleted(false);
                        approverDefinitionRepository.save(approver);
                    }
                }
                
                nodes.add(savedNode);
            }
            savedDefinition.setNodes(nodes);
        }
        
        return modelMapper.map(savedDefinition, ProcessDefinitionDTO.class);
    }
    
    @Override
    public ProcessDefinitionDTO updateProcessDefinition(Long id, ProcessDefinitionDTO definitionDTO) {
        // 查找流程定义
        ProcessDefinition definition = processDefinitionRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("流程定义不存在: " + id));
        
        // 验证流程编码唯一性
        if (!definition.getProcessCode().equals(definitionDTO.getProcessCode()) &&
                processDefinitionRepository.findByProcessCode(definitionDTO.getProcessCode()).isPresent()) {
            throw new BusinessException("流程编码已存在: " + definitionDTO.getProcessCode());
        }
        
        // 更新基本信息
        definition.setProcessCode(definitionDTO.getProcessCode());
        definition.setProcessName(definitionDTO.getProcessName());
        definition.setProcessTypeCode(definitionDTO.getProcessTypeCode());
        definition.setDescription(definitionDTO.getDescription());
        definition.setFormConfig(definitionDTO.getFormConfig());
        definition.setTimeoutDays(definitionDTO.getTimeoutDays());
        definition.setUpdatedBy(getCurrentUser());
        definition.setUpdatedTime(LocalDateTime.now());
        
        // 保存更新后的流程定义
        ProcessDefinition updatedDefinition = processDefinitionRepository.save(definition);
        
        // 更新节点定义（先删除旧的，再创建新的）
        if (definitionDTO.getNodes() != null) {
            // 删除旧的节点定义及其审批人定义
            List<ApprovalNodeDefinition> oldNodes = nodeDefinitionRepository
                    .findByProcessDefinitionIdOrderBySequenceNo(id);
            for (ApprovalNodeDefinition oldNode : oldNodes) {
                oldNode.setIsDeleted(true);
                oldNode.setUpdatedBy(getCurrentUser());
                oldNode.setUpdatedTime(LocalDateTime.now());
                
                List<NodeApproverDefinition> oldApprovers = approverDefinitionRepository.findByNodeId(oldNode.getId());
                for (NodeApproverDefinition oldApprover : oldApprovers) {
                    oldApprover.setIsDeleted(true);
                    oldApprover.setUpdatedBy(getCurrentUser());
                    oldApprover.setUpdatedTime(LocalDateTime.now());
                    approverDefinitionRepository.save(oldApprover);
                }
                
                nodeDefinitionRepository.save(oldNode);
            }
            
            // 创建新的节点定义及其审批人定义
            List<ApprovalNodeDefinition> newNodes = new ArrayList<>();
            for (ApprovalNodeDefinitionDTO nodeDTO : definitionDTO.getNodes()) {
                ApprovalNodeDefinition node = modelMapper.map(nodeDTO, ApprovalNodeDefinition.class);
                node.setProcessDefinition(updatedDefinition);
                node.setCreatedBy(getCurrentUser());
                node.setCreatedTime(LocalDateTime.now());
                node.setIsDeleted(false);
                
                ApprovalNodeDefinition savedNode = nodeDefinitionRepository.save(node);
                
                // 保存审批人定义
                if (nodeDTO.getApprovers() != null) {
                    for (NodeApproverDefinitionDTO approverDTO : nodeDTO.getApprovers()) {
                        NodeApproverDefinition approver = modelMapper.map(approverDTO, NodeApproverDefinition.class);
                        approver.setNode(savedNode);
                        approver.setCreatedBy(getCurrentUser());
                        approver.setCreatedTime(LocalDateTime.now());
                        approver.setIsDeleted(false);
                        approverDefinitionRepository.save(approver);
                    }
                }
                
                newNodes.add(savedNode);
            }
            updatedDefinition.setNodes(newNodes);
        }
        
        return modelMapper.map(updatedDefinition, ProcessDefinitionDTO.class);
    }
    
    @Override
    public void deleteProcessDefinition(Long id) {
        ProcessDefinition definition = processDefinitionRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("流程定义不存在: " + id));
        
        definition.setIsDeleted(true);
        definition.setUpdatedBy(getCurrentUser());
        definition.setUpdatedTime(LocalDateTime.now());
        
        processDefinitionRepository.save(definition);
    }
    
    @Override
    public ProcessDefinitionDTO getProcessDefinition(Long id) {
        ProcessDefinition definition = processDefinitionRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("流程定义不存在: " + id));
        
        if (definition.getIsDeleted()) {
            throw new NotFoundException("流程定义不存在: " + id);
        }
        
        return modelMapper.map(definition, ProcessDefinitionDTO.class);
    }
    
    @Override
    public List<ProcessDefinitionDTO> getAllActiveProcessDefinitions() {
        List<ProcessDefinition> definitions = processDefinitionRepository
                .findByStatusAndIsDeletedFalse(ProcessStatus.ACTIVE);
        
        return definitions.stream()
                .map(definition -> modelMapper.map(definition, ProcessDefinitionDTO.class))
                .collect(Collectors.toList());
    }
    
    @Override
    public List<ProcessDefinitionDTO> getProcessDefinitionsByType(String typeCode) {
        List<ProcessDefinition> definitions = processDefinitionRepository
                .findActiveProcessesByType(typeCode, ProcessStatus.ACTIVE);
        
        return definitions.stream()
                .map(definition -> modelMapper.map(definition, ProcessDefinitionDTO.class))
                .collect(Collectors.toList());
    }
    
    @Override
    public void activateProcessDefinition(Long id) {
        ProcessDefinition definition = processDefinitionRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("流程定义不存在: " + id));
        
        definition.setStatus(ProcessStatus.ACTIVE);
        definition.setUpdatedBy(getCurrentUser());
        definition.setUpdatedTime(LocalDateTime.now());
        
        processDefinitionRepository.save(definition);
    }
    
    @Override
    public void deactivateProcessDefinition(Long id) {
        ProcessDefinition definition = processDefinitionRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("流程定义不存在: " + id));
        
        definition.setStatus(ProcessStatus.DISABLED);
        definition.setUpdatedBy(getCurrentUser());
        definition.setUpdatedTime(LocalDateTime.now());
        
        processDefinitionRepository.save(definition);
    }
    
    private String getCurrentUser() {
        // 在实际应用中，从安全上下文中获取当前用户
        return "system";
    }
}
```

### 流程引擎服务

```java
// 流程引擎服务接口
public interface ProcessEngineService {
    ProcessInstanceDTO startProcess(ProcessApplyDTO applyDTO);
    
    ProcessInstanceDTO submitProcess(Long processInstanceId);
    
    ProcessInstanceDTO approveTask(ApprovalActionDTO actionDTO);
    
    ProcessInstanceDTO rejectTask(ApprovalActionDTO actionDTO);
    
    ProcessInstanceDTO reworkTask(ApprovalActionDTO actionDTO);
    
    ProcessInstanceDTO transferTask(ApprovalActionDTO actionDTO);
    
    ProcessInstanceDTO cancelProcess(Long processInstanceId, String reason);
    
    ProcessInstanceDTO getProcessInstance(Long processInstanceId);
    
    List<ProcessInstanceDTO> getMyPendingTasks(Long approverId);
    
    List<ProcessInstanceDTO> getMyAppliedProcesses(Long applyUserId);
    
    List<ApprovalRecordDTO> getProcessApprovalRecords(Long processInstanceId);
}

// 流程引擎服务实现
@Service
@Transactional
public class ProcessEngineServiceImpl implements ProcessEngineService {
    private final ProcessDefinitionRepository processDefinitionRepository;
    private final ApprovalNodeDefinitionRepository nodeDefinitionRepository;
    private final NodeApproverDefinitionRepository approverDefinitionRepository;
    private final ProcessInstanceRepository processInstanceRepository;
    private final ProcessNodeInstanceRepository nodeInstanceRepository;
    private final NodeApproverInstanceRepository approverInstanceRepository;
    private final ApprovalRecordRepository approvalRecordRepository;
    private final ProcessOperationLogRepository operationLogRepository;
    private final ModelMapper modelMapper;
    
    // 构造函数和ModelMapper配置略...
    
    @Override
    public ProcessInstanceDTO startProcess(ProcessApplyDTO applyDTO) {
        // 查找流程定义
        ProcessDefinition processDefinition = processDefinitionRepository.findById(applyDTO.getProcessDefinitionId())
                .orElseThrow(() -> new NotFoundException("流程定义不存在: " + applyDTO.getProcessDefinitionId()));
        
        // 检查流程定义状态
        if (processDefinition.getStatus() != ProcessStatus.ACTIVE) {
            throw new BusinessException("流程定义未激活: " + processDefinition.getProcessCode());
        }
        
        // 创建流程实例
        ProcessInstance processInstance = new ProcessInstance();
        processInstance.setProcessNo(generateProcessNo());
        processInstance.setProcessDefinition(processDefinition);
        processInstance.setOfficerId(applyDTO.getOfficerId());
        processInstance.setEmployeeId(applyDTO.getEmployeeId());
        processInstance.setEmployeeName(applyDTO.getEmployeeName());
        processInstance.setFormData(applyDTO.getFormData());
        processInstance.setStatus(ProcessInstanceStatus.DRAFT);
        processInstance.setReworkCount(0);
        processInstance.setApplyUserId(getCurrentUserId());
        processInstance.setApplyUserName(getCurrentUserName());
        processInstance.setApplyTime(LocalDateTime.now());
        processInstance.setEffectiveDate(applyDTO.getEffectiveDate());
        processInstance.setPriority(applyDTO.getPriority() != null ? applyDTO.getPriority() : ProcessPriority.NORMAL);
        processInstance.setCreatedBy(getCurrentUserName());
        processInstance.setCreatedTime(LocalDateTime.now());
        processInstance.setIsDeleted(false);
        
        // 保存流程实例
        ProcessInstance savedInstance = processInstanceRepository.save(processInstance);
        
        // 记录操作日志
        createOperationLog(savedInstance, null, OperationType.CREATE);
        
        // 预保存预选的审批人信息（暂存在上下文中，提交时使用）
        if (applyDTO.getPreSelectedApprovers() != null && !applyDTO.getPreSelectedApprovers().isEmpty()) {
            savePreSelectedApprovers(savedInstance.getId(), applyDTO.getPreSelectedApprovers());
        }
        
        return modelMapper.map(savedInstance, ProcessInstanceDTO.class);
    }
    
    @Override
    public ProcessInstanceDTO submitProcess(Long processInstanceId) {
        // 查找流程实例
        ProcessInstance processInstance = processInstanceRepository.findById(processInstanceId)
                .orElseThrow(() -> new NotFoundException("流程实例不存在: " + processInstanceId));
        
        // 检查流程实例状态
        if (processInstance.getStatus() != ProcessInstanceStatus.DRAFT) {
            throw new BusinessException("只有草稿状态的流程才能提交");
        }
        
        // 启动流程
        return startProcessInstance(processInstance);
    }
    
    // 启动流程实例，创建第一个节点实例
    private ProcessInstanceDTO startProcessInstance(ProcessInstance processInstance) {
        // 更新流程实例状态
        processInstance.setStatus(ProcessInstanceStatus.IN_PROGRESS);
        processInstance.setUpdatedBy(getCurrentUserName());
        processInstance.setUpdatedTime(LocalDateTime.now());
        
        // 查找流程定义的第一个节点
        List<ApprovalNodeDefinition> nodes = nodeDefinitionRepository
                .findByProcessDefinitionIdOrderBySequenceNo(processInstance.getProcessDefinition().getId());
        
        if (nodes.isEmpty()) {
            throw new BusinessException("流程定义没有节点");
        }
        
        // 获取第一个节点
        ApprovalNodeDefinition firstNode = nodes.get(0);
        
        // 创建第一个节点实例
        ProcessNodeInstance nodeInstance = createNodeInstance(processInstance, firstNode, null);
        
        // 更新流程实例的当前节点
        processInstance.setCurrentNodeInstance(nodeInstance);
        ProcessInstance updatedInstance = processInstanceRepository.save(processInstance);
        
        // 记录操作日志
        createOperationLog(updatedInstance, nodeInstance, OperationType.SUBMIT);
        
        // 检查是否需要自动执行该节点（例如条件节点可能需要自动执行）
        if (firstNode.getNodeType() == NodeType.CONDITIONAL) {
            return evaluateConditionalNode(updatedInstance, nodeInstance);
        }
        
        return modelMapper.map(updatedInstance, ProcessInstanceDTO.class);
    }
    
    // 创建节点实例
    private ProcessNodeInstance createNodeInstance(
            ProcessInstance processInstance,
            ApprovalNodeDefinition nodeDefinition,
            ProcessNodeInstance prevNodeInstance) {
        
        // 创建节点实例
        ProcessNodeInstance nodeInstance = new ProcessNodeInstance();
        nodeInstance.setProcessInstance(processInstance);
        nodeInstance.setNodeDefinition(nodeDefinition);
        nodeInstance.setNodeName(nodeDefinition.getNodeName());
        nodeInstance.setNodeStatus(NodeInstanceStatus.PENDING);
        nodeInstance.setStartTime(LocalDateTime.now());
        
        // 设置超时时间
        if (nodeDefinition.getTimeoutHours() != null) {
            nodeInstance.setDueTime(LocalDateTime.now().plusHours(nodeDefinition.getTimeoutHours()));
        }
        
        // 设置前一个节点实例ID
        if (prevNodeInstance != null) {
            nodeInstance.setPrevNodeInstanceId(prevNodeInstance.getId());
        }
        
        nodeInstance.setCreatedBy(getCurrentUserName());
        nodeInstance.setCreatedTime(LocalDateTime.now());
        
        // 保存节点实例
        ProcessNodeInstance savedNodeInstance = nodeInstanceRepository.save(nodeInstance);
        
        // 创建审批人实例
        createApproverInstances(savedNodeInstance, nodeDefinition);
        
        // 更新节点状态
        savedNodeInstance.setNodeStatus(NodeInstanceStatus.IN_PROGRESS);
        return nodeInstanceRepository.save(savedNodeInstance);
    }
    
    // 创建审批人实例
    private void createApproverInstances(ProcessNodeInstance nodeInstance, ApprovalNodeDefinition nodeDefinition) {
        List<NodeApproverDefinition> approverDefinitions = approverDefinitionRepository.findByNodeId(nodeDefinition.getId());
        
        // 获取预选的审批人信息
        Map<Long, List<PreSelectedApproverDTO>> preSelectedMap = getPreSelectedApprovers(nodeInstance.getProcessInstance().getId());
        
        if (approverDefinitions.isEmpty()) {
            throw new BusinessException("节点" + nodeDefinition.getNodeName() + "没有定义审批人");
        }
        
        List<NodeApproverInstance> approverInstances = new ArrayList<>();
        
        for (NodeApproverDefinition approverDef : approverDefinitions) {
            // 根据审批人类型获取实际审批人列表
            List<ApproverInfo> approvers = resolveApprovers(approverDef, nodeInstance.getProcessInstance());
            
            for (ApproverInfo approver : approvers) {
                // 检查是否有预选审批人
                if (preSelectedMap.containsKey(nodeDefinition.getId())) {
                    List<PreSelectedApproverDTO> preSelected = preSelectedMap.get(nodeDefinition.getId());
                    Optional<PreSelectedApproverDTO> matchedPreSelected = preSelected.stream()
                            .filter(p -> p.getApproverId().equals(approver.getId()))
                            .findFirst();
                    
                    if (!matchedPreSelected.isPresent()) {
                        // 如果当前审批人不在预选列表中，则跳过
                        continue;
                    }
                }
                
                NodeApproverInstance approverInstance = new NodeApproverInstance();
                approverInstance.setNodeInstance(nodeInstance);
                approverInstance.setApproverId(approver.getId());
                approverInstance.setApproverName(approver.getName());
                approverInstance.setApproverType(approverDef.getApproverType());
                approverInstance.setApprovalStatus(ApprovalStatus.PENDING);
                approverInstance.setAssignTime(LocalDateTime.now());
                
                // 设置超时时间
                if (nodeDefinition.getTimeoutHours() != null) {
                    approverInstance.setDueTime(LocalDateTime.now().plusHours(nodeDefinition.getTimeoutHours()));
                }
                
                approverInstance.setCreatedBy(getCurrentUserName());
                approverInstance.setCreatedTime(LocalDateTime.now());
                
                approverInstances.add(approverInstance);
            }
        }
        
        if (approverInstances.isEmpty()) {
            throw new BusinessException("无法找到审批人");
        }
        
        // 批量保存审批人实例
        approverInstanceRepository.saveAll(approverInstances);
    }
    
    // 解析审批人
    private List<ApproverInfo> resolveApprovers(NodeApproverDefinition approverDef, ProcessInstance processInstance) {
        List<ApproverInfo> result = new ArrayList<>();
        
        switch (approverDef.getApproverType()) {
            case USER:
                // 直接指定用户
                Long userId = Long.valueOf(approverDef.getApproverId());
                String userName = getUserNameById(userId);  // 假设有这个方法获取用户名
                result.add(new ApproverInfo(userId, userName));
                break;
                
            case ROLE:
                // 根据角色查找用户
                List<ApproverInfo> usersByRole = getUsersByRole(approverDef.getApproverId());
                result.addAll(usersByRole);
                break;
                
            case DEPARTMENT:
                // 根据部门查找用户
                List<ApproverInfo> usersByDept = getUsersByDepartment(approverDef.getApproverId());
                result.addAll(usersByDept);
                break;
                
            case HIERARCHY:
                // 根据申请人的层级关系查找审批人，例如直接上级
                ApproverInfo manager = getManagerByEmployeeId(processInstance.getEmployeeId());
                if (manager != null) {
                    result.add(manager);
                }
                break;
                
            case EXPRESSION:
                // 根据表达式动态确定审批人，这里简化处理
                String expression = approverDef.getExpression();
                ApproverInfo dynamicApprover = evaluateApproverExpression(expression, processInstance);
                if (dynamicApprover != null) {
                    result.add(dynamicApprover);
                }
                break;
                
            default:
                throw new BusinessException("不支持的审批人类型: " + approverDef.getApproverType());
        }
        
        return result;
    }
    
    // 用于存储和获取预选审批人的临时方法
    // 在实际应用中，应该持久化这些数据
    private static final Map<Long, List<PreSelectedApproverDTO>> preSelectedApproversMap = new HashMap<>();
    
    private void savePreSelectedApprovers(Long processInstanceId, List<PreSelectedApproverDTO> approvers) {
        // 按节点分组
        Map<Long, List<PreSelectedApproverDTO>> groupedApprovers = approvers.stream()
                .collect(Collectors.groupingBy(PreSelectedApproverDTO::getNodeDefinitionId));
        
        preSelectedApproversMap.put(processInstanceId, approvers);
    }
    
    private Map<Long, List<PreSelectedApproverDTO>> getPreSelectedApprovers(Long processInstanceId) {
        List<PreSelectedApproverDTO> approvers = preSelectedApproversMap.get(processInstanceId);
        if (approvers == null) {
            return Collections.emptyMap();
        }
        
        return approvers.stream()
                .collect(Collectors.groupingBy(PreSelectedApproverDTO::getNodeDefinitionId));
    }
    
    // 评估条件节点，根据条件自动执行下一步
    private ProcessInstanceDTO evaluateConditionalNode(ProcessInstance processInstance, ProcessNodeInstance nodeInstance) {
        ApprovalNodeDefinition nodeDef = nodeInstance.getNodeDefinition();
        String conditionExpression = nodeDef.getConditionExpression();
        
        // 评估条件表达式，这里简化处理
        boolean conditionResult = evaluateCondition(conditionExpression, processInstance);
        
        // 查找所有节点
        List<ApprovalNodeDefinition> allNodes = nodeDefinitionRepository
                .findByProcessDefinitionIdOrderBySequenceNo(processInstance.getProcessDefinition().getId());
        
        // 查找当前节点在序列中的位置
        int currentIndex = -1;
        for (int i = 0; i < allNodes.size(); i++) {
            if (allNodes.get(i).getId().equals(nodeDef.getId())) {
                currentIndex = i;
                break;
            }
        }
        
        if (currentIndex == -1 || currentIndex >= allNodes.size() - 1) {
            // 没有找到当前节点或当前节点是最后一个节点
            // 完成流程
            return completeProcess(processInstance, true);
        }
        
        // 获取下一个节点
        ApprovalNodeDefinition nextNode = allNodes.get(currentIndex + 1);
        
        // 自动完成当前节点
        nodeInstance.setNodeStatus(NodeInstanceStatus.APPROVED);
        nodeInstance.setEndTime(LocalDateTime.now());
        nodeInstanceRepository.save(nodeInstance);
        
        // 创建下一个节点实例
        ProcessNodeInstance nextNodeInstance = createNodeInstance(processInstance, nextNode, nodeInstance);
        
        // 更新流程实例的当前节点
        processInstance.setCurrentNodeInstance(nextNodeInstance);
        ProcessInstance updatedInstance = processInstanceRepository.save(processInstance);
        
        // 如果下一个节点也是条件节点，递归处理
        if (nextNode.getNodeType() == NodeType.CONDITIONAL) {
            return evaluateConditionalNode(updatedInstance, nextNodeInstance);
        }
        
        return modelMapper.map(updatedInstance, ProcessInstanceDTO.class);
    }
    
    @Override
    public ProcessInstanceDTO approveTask(ApprovalActionDTO actionDTO) {
        // 检查参数
        validateActionDTO(actionDTO);
        
        // 查找流程实例
        ProcessInstance processInstance = processInstanceRepository.findById(actionDTO.getProcessInstanceId())
                .orElseThrow(() -> new NotFoundException("流程实例不存在: " + actionDTO.getProcessInstanceId()));
        
        // 检查流程实例状态
        if (processInstance.getStatus() != ProcessInstanceStatus.IN_PROGRESS) {
            throw new BusinessException("流程实例不在进行中状态");
        }
        
        // 查找节点实例
        ProcessNodeInstance nodeInstance = nodeInstanceRepository.findById(actionDTO.getNodeInstanceId())
                .orElseThrow(() -> new NotFoundException("节点实例不存在: " + actionDTO.getNodeInstanceId()));
        
        // 检查节点实例状态
        if (nodeInstance.getNodeStatus() != NodeInstanceStatus.IN_PROGRESS) {
            throw new BusinessException("节点不在处理中状态");
        }
        
        // 查找审批人实例
        NodeApproverInstance approverInstance = approverInstanceRepository.findById(actionDTO.getApproverInstanceId())
                .orElseThrow(() -> new NotFoundException("审批人实例不存在: " + actionDTO.getApproverInstanceId()));
        
        // 检查审批人实例状态
        if (approverInstance.getApprovalStatus() != ApprovalStatus.PENDING) {
            throw new BusinessException("该任务已经被处理");
        }
        
        // 检查当前用户是否有权限处理该任务
        if (!approverInstance.getApproverId().equals(getCurrentUserId())) {
            throw new BusinessException("当前用户无权处理该任务");
        }
        
        // 更新审批人实例
        approverInstance.setApprovalStatus(ApprovalStatus.APPROVED);
        approverInstance.setActionTime(LocalDateTime.now());
        approverInstance.setComments(actionDTO.getActionComment());
        approverInstance.setUpdatedBy(getCurrentUserName());
        approverInstance.setUpdatedTime(LocalDateTime.now());
        approverInstanceRepository.save(approverInstance);
        
        // 创建审批记录
        ApprovalRecord record = new ApprovalRecord();
        record.setProcessInstance(processInstance);
        record.setNodeInstance(nodeInstance);
        record.setApproverInstance(approverInstance);
        record.setApproverId(getCurrentUserId());
        record.setApproverName(getCurrentUserName());
        record.setActionType(ActionType.APPROVE);
        record.setActionStatus(ActionStatus.SUCCESS);
        record.setActionComment(actionDTO.getActionComment());
        record.setActionTime(LocalDateTime.now());
        record.setCreatedBy(getCurrentUserName());
        record.setCreatedTime(LocalDateTime.now());
        approvalRecordRepository.save(record);
        
        // 记录操作日志
        createOperationLog(processInstance, nodeInstance, OperationType.APPROVE);
        
        // 判断节点是否已完成
        return processNodeAfterAction(processInstance, nodeInstance, true);
    }
    
    @Override
    public ProcessInstanceDTO rejectTask(ApprovalActionDTO actionDTO) {
        // 检查参数
        validateActionDTO(actionDTO);
        
        // 查找流程实例
        ProcessInstance processInstance = processInstanceRepository.findById(actionDTO.getProcessInstanceId())
                .orElseThrow(() -> new NotFoundException("流程实例不存在: " + actionDTO.getProcessInstanceId()));
        
        // 检查流程实例状态
        if (processInstance.getStatus() != ProcessInstanceStatus.IN_PROGRESS) {
            throw new BusinessException("流程实例不在进行中状态");
        }
        
        // 查找节点实例
        ProcessNodeInstance nodeInstance = nodeInstanceRepository.findById(actionDTO.getNodeInstanceId())
                .orElseThrow(() -> new NotFoundException("节点实例不存在: " + actionDTO.getNodeInstanceId()));
        
        // 检查节点实例状态
        if (nodeInstance.getNodeStatus() != NodeInstanceStatus.IN_PROGRESS) {
            throw new BusinessException("节点不在处理中状态");
        }
        
        // 查找审批人实例
        NodeApproverInstance approverInstance = approverInstanceRepository.findById(actionDTO.getApproverInstanceId())
                .orElseThrow(() -> new NotFoundException("审批人实例不存在: " + actionDTO.getApproverInstanceId()));
        
        // 检查审批人实例状态
        if (approverInstance.getApprovalStatus() != ApprovalStatus.PENDING) {
            throw new BusinessException("该任务已经被处理");
        }
        
        // 检查当前用户是否有权限处理该任务
        if (!approverInstance.getApproverId().equals(getCurrentUserId())) {
            throw new BusinessException("当前用户无权处理该任务");
        }
        
        // 更新审批人实例
        approverInstance.setApprovalStatus(ApprovalStatus.REJECTED);
        approverInstance.setActionTime(LocalDateTime.now());
        approverInstance.setComments(actionDTO.getActionComment());
        approverInstance.setUpdatedBy(getCurrentUserName());
        approverInstance.setUpdatedTime(LocalDateTime.now());
        approverInstanceRepository.save(approverInstance);
        
        // 创建审批记录
        ApprovalRecord record = new ApprovalRecord();
        record.setProcessInstance(processInstance);
        record.setNodeInstance(nodeInstance);
        record.setApproverInstance(approverInstance);
        record.setApproverId(getCurrentUserId());
        record.setApproverName(getCurrentUserName());
        record.setActionType(ActionType.REJECT);
        record.setActionStatus(ActionStatus.SUCCESS);
        record.setActionComment(actionDTO.getActionComment());
        record.setActionTime(LocalDateTime.now());
        record.setCreatedBy(getCurrentUserName());
        record.setCreatedTime(LocalDateTime.now());
        approvalRecordRepository.save(record);
        
        // 记录操作日志
        createOperationLog(processInstance, nodeInstance, OperationType.REJECT);
        
        // 直接完成流程（拒绝）
        return completeProcess(processInstance, false);
    }
    
    @Override
    public ProcessInstanceDTO reworkTask(ApprovalActionDTO actionDTO) {
        // 检查参数
        validateActionDTO(actionDTO);
        
        // 查找流程实例
        ProcessInstance processInstance = processInstanceRepository.findById(actionDTO.getProcessInstanceId())
                .orElseThrow(() -> new NotFoundException("流程实例不存在: " + actionDTO.getProcessInstanceId()));
        
        // 检查流程实例状态
        if (processInstance.getStatus() != ProcessInstanceStatus.IN_PROGRESS) {
            throw new BusinessException("流程实例不在进行中状态");
        }
        
        // 查找节点实例
        ProcessNodeInstance nodeInstance = nodeInstanceRepository.findById(actionDTO.getNodeInstanceId())
                .orElseThrow(() -> new NotFoundException("节点实例不存在: " + actionDTO.getNodeInstanceId()));
        
        // 检查节点实例状态
        if (nodeInstance.getNodeStatus() != NodeInstanceStatus.IN_PROGRESS) {
            throw new BusinessException("节点不在处理中状态");
        }
        
        // 查找审批人实例
        NodeApproverInstance approverInstance = approverInstanceRepository.findById(actionDTO.getApproverInstanceId())
                .orElseThrow(() -> new NotFoundException("审批人实例不存在: " + actionDTO.getApproverInstanceId()));
        
        // 检查审批人实例状态
        if (approverInstance.getApprovalStatus() != ApprovalStatus.PENDING) {
            throw new BusinessException("该任务已经被处理");
        }
        
        // 检查当前用户是否有权限处理该任务
        if (!approverInstance.getApproverId().equals(getCurrentUserId())) {
            throw new BusinessException("当前用户无权处理该任务");
        }
        
        // 更新审批人实例
        approverInstance.setApprovalStatus(ApprovalStatus.REJECTED);  // 使用REJECTED状态表示驳回重做
        approverInstance.setActionTime(LocalDateTime.now());
        approverInstance.setComments(actionDTO.getActionComment());
        approverInstance.setUpdatedBy(getCurrentUserName());
        approverInstance.setUpdatedTime(LocalDateTime.now());
        approverInstanceRepository.save(approverInstance);
        
        // 创建审批记录
        ApprovalRecord record = new ApprovalRecord();
        record.setProcessInstance(processInstance);
        record.setNodeInstance(nodeInstance);
        record.setApproverInstance(approverInstance);
        record.setApproverId(getCurrentUserId());
        record.setApproverName(getCurrentUserName());
        record.setActionType(ActionType.REWORK);
        record.setActionStatus(ActionStatus.SUCCESS);
        record.setActionComment(actionDTO.getActionComment());
        record.setActionTime(LocalDateTime.now());
        record.setCreatedBy(getCurrentUserName());
        record.setCreatedTime(LocalDateTime.now());
        approvalRecordRepository.save(record);
        
        // 记录操作日志
        createOperationLog(processInstance, nodeInstance, OperationType.REWORK);
        
        // 执行退回重做逻辑
        return reworkProcess(processInstance, nodeInstance);
    }
    
    // 退回重做流程
    private ProcessInstanceDTO reworkProcess(ProcessInstance processInstance, ProcessNodeInstance currentNodeInstance) {
        // 查找需要退回的节点定义
        ApprovalNodeDefinition currentNodeDef = currentNodeInstance.getNodeDefinition();
        Long reworkNodeId = currentNodeDef.getReworkNodeId();
        
        // 如果未指定退回节点，默认退回到第一个节点
        ApprovalNodeDefinition reworkNodeDef;
        if (reworkNodeId == null) {
            List<ApprovalNodeDefinition> nodes = nodeDefinitionRepository
                    .findByProcessDefinitionIdOrderBySequenceNo(processInstance.getProcessDefinition().getId());
            reworkNodeDef = nodes.get(0);
        } else {
            reworkNodeDef = nodeDefinitionRepository.findById(reworkNodeId)
                    .orElseThrow(() -> new BusinessException("退回节点不存在: " + reworkNodeId));
        }
        
        // 更新当前节点实例状态
        currentNodeInstance.setNodeStatus(NodeInstanceStatus.REWORK);
        currentNodeInstance.setEndTime(LocalDateTime.now());
        nodeInstanceRepository.save(currentNodeInstance);
        
        // 查找所有活动的节点实例并标记为取消
        List<ProcessNodeInstance> activeNodes = nodeInstanceRepository
                .findActiveNodesByProcessInstanceId(processInstance.getId(), NodeInstanceStatus.IN_PROGRESS);
        for (ProcessNodeInstance node : activeNodes) {
            if (!node.getId().equals(currentNodeInstance.getId())) {
                node.setNodeStatus(NodeInstanceStatus.CANCELED);
                node.setEndTime(LocalDateTime.now());
                nodeInstanceRepository.save(node);
            }
        }
        
        // 更新流程实例状态
        processInstance.setStatus(ProcessInstanceStatus.REWORK);
        processInstance.setReworkCount(processInstance.getReworkCount() + 1);
        processInstance.setUpdatedBy(getCurrentUserName());
        processInstance.setUpdatedTime(LocalDateTime.now());
        ProcessInstance updatedInstance = processInstanceRepository.save(processInstance);
        
        return modelMapper.map(updatedInstance, ProcessInstanceDTO.class);
    }
    
    @Override
    public ProcessInstanceDTO transferTask(ApprovalActionDTO actionDTO) {
        // 检查参数
        validateActionDTO(actionDTO);
        if (actionDTO.getTargetApproverId() == null) {
            throw new BusinessException("转交目标审批人不能为空");
        }
        
        // 查找流程实例
        ProcessInstance processInstance = processInstanceRepository.findById(actionDTO.getProcessInstanceId())
                .orElseThrow(() -> new NotFoundException("流程实例不存在: " + actionDTO.getProcessInstanceId()));
        
        // 检查流程实例状态
        if (processInstance.getStatus() != ProcessInstanceStatus.IN_PROGRESS) {
            throw new BusinessException("流程实例不在进行中状态");
        }
        
        // 查找节点实例
        ProcessNodeInstance nodeInstance = nodeInstanceRepository.findById(actionDTO.getNodeInstanceId())
                .orElseThrow(() -> new NotFoundException("节点实例不存在: " + actionDTO.getNodeInstanceId()));
        
        // 检查节点实例状态
        if (nodeInstance.getNodeStatus() != NodeInstanceStatus.IN_PROGRESS) {
            throw new BusinessException("节点不在处理中状态");
        }
        
        // 查找审批人实例
        NodeApproverInstance approverInstance = approverInstanceRepository.findById(actionDTO.getApproverInstanceId())
                .orElseThrow(() -> new NotFoundException("审批人实例不存在: " + actionDTO.getApproverInstanceId()));
        
        // 检查审批人实例状态
        if (approverInstance.getApprovalStatus() != ApprovalStatus.PENDING) {
            throw new BusinessException("该任务已经被处理");
        }
        
        // 检查当前用户是否有权限处理该任务
        if (!approverInstance.getApproverId().equals(getCurrentUserId())) {
            throw new BusinessException("当前用户无权处理该任务");
        }
        
        // 更新当前审批人实例状态为已转交
        approverInstance.setApprovalStatus(ApprovalStatus.TRANSFERRED);
        approverInstance.setActionTime(LocalDateTime.now());
        approverInstance.setComments(actionDTO.getActionComment());
        approverInstance.setTransferredToId(actionDTO.getTargetApproverId());
        approverInstance.setTransferredToName(actionDTO.getTargetApproverName());
        approverInstance.setUpdatedBy(getCurrentUserName());
        approverInstance.setUpdatedTime(LocalDateTime.now());
        approverInstanceRepository.save(approverInstance);
        
        // 创建新的审批人实例（转交目标）
        NodeApproverInstance newApproverInstance = new NodeApproverInstance();
        newApproverInstance.setNodeInstance(nodeInstance);
        newApproverInstance.setApproverId(actionDTO.getTargetApproverId());
        newApproverInstance.setApproverName(actionDTO.getTargetApproverName());
        newApproverInstance.setApproverType(approverInstance.getApproverType());
        newApproverInstance.setApprovalStatus(ApprovalStatus.PENDING);
        newApproverInstance.setAssignTime(LocalDateTime.now());
        newApproverInstance.setDueTime(approverInstance.getDueTime());  // 继承原来的超时时间
        newApproverInstance.setCreatedBy(getCurrentUserName());
        newApproverInstance.setCreatedTime(LocalDateTime.now());
        approverInstanceRepository.save(newApproverInstance);
        
        // 创建审批记录
        ApprovalRecord record = new ApprovalRecord();
        record.setProcessInstance(processInstance);
        record.setNodeInstance(nodeInstance);
        record.setApproverInstance(approverInstance);
        record.setApproverId(getCurrentUserId());
        record.setApproverName(getCurrentUserName());
        record.setActionType(ActionType.TRANSFER);
        record.setActionStatus(ActionStatus.SUCCESS);
        record.setActionComment(actionDTO.getActionComment());
        record.setActionTime(LocalDateTime.now());
        record.setTargetApproverId(actionDTO.getTargetApproverId());
        record.setTargetApproverName(actionDTO.getTargetApproverName());
        record.setCreatedBy(getCurrentUserName());
        record.setCreatedTime(LocalDateTime.now());
        approvalRecordRepository.save(record);
        
        // 记录操作日志
        createOperationLog(processInstance, nodeInstance, OperationType.TRANSFER);
        
        return modelMapper.map(processInstance, ProcessInstanceDTO.class);
    }
    
    @Override
    public ProcessInstanceDTO cancelProcess(Long processInstanceId, String reason) {
        // 查找流程实例
        ProcessInstance processInstance = processInstanceRepository.findById(processInstanceId)
                .orElseThrow(() -> new NotFoundException("流程实例不存在: " + processInstanceId));
        
        // 检查流程实例状态
        if (processInstance.getStatus() != ProcessInstanceStatus.DRAFT &&
            processInstance.getStatus() != ProcessInstanceStatus.IN_PROGRESS &&
            processInstance.getStatus() != ProcessInstanceStatus.REWORK) {
            throw new BusinessException("已完成的流程不能取消");
        }
        
        // 检查权限（只有流程发起人或管理员可以取消流程）
        boolean isApplicant = processInstance.getApplyUserId().equals(getCurrentUserId());
        boolean isAdmin = isCurrentUserAdmin();  // 假设有这样的方法检查当前用户是否是管理员
        
        if (!isApplicant && !isAdmin) {
            throw new BusinessException("只有流程发起人或管理员可以取消流程");
        }
        
        // 更新流程实例状态
        processInstance.setStatus(ProcessInstanceStatus.CANCELED);
        processInstance.setCompleteTime(LocalDateTime.now());
        processInstance.setUpdatedBy(getCurrentUserName());
        processInstance.setUpdatedTime(LocalDateTime.now());
        ProcessInstance updatedInstance = processInstanceRepository.save(processInstance);
        
        // 查找所有活动的节点实例并标记为取消
        List<ProcessNodeInstance> activeNodes = nodeInstanceRepository
                .findActiveNodesByProcessInstanceId(processInstance.getId(), NodeInstanceStatus.IN_PROGRESS);
        for (ProcessNodeInstance node : activeNodes) {
            node.setNodeStatus(NodeInstanceStatus.CANCELED);
            node.setEndTime(LocalDateTime.now());
            nodeInstanceRepository.save(node);
        }
        
        // 记录操作日志
        Map<String, Object> details = new HashMap<>();
        details.put("reason", reason);
        String operationDetails = new ObjectMapper().writeValueAsString(details);
        
        ProcessOperationLog log = new ProcessOperationLog();
        log.setProcessInstance(updatedInstance);
        log.setNodeInstance(updatedInstance.getCurrentNodeInstance());
        log.setOperationType(OperationType.CANCEL);
        log.setOperatorId(getCurrentUserId());
        log.setOperatorName(getCurrentUserName());
        log.setOperationTime(LocalDateTime.now());
        log.setOperationDetails(operationDetails);
        log.setCreatedBy(getCurrentUserName());
        log.setCreatedTime(LocalDateTime.now());
        operationLogRepository.save(log);
        
        return modelMapper.map(updatedInstance, ProcessInstanceDTO.class);
    }
    
    // 处理节点完成后的逻辑
    private ProcessInstanceDTO processNodeAfterAction(
            ProcessInstance processInstance,
            ProcessNodeInstance nodeInstance,
            boolean isApproved) {
        
        // 检查节点是否已完成
        if (isNodeCompleted(nodeInstance, isApproved)) {
            // 更新节点状态
            nodeInstance.setNodeStatus(isApproved ? NodeInstanceStatus.APPROVED : NodeInstanceStatus.REJECTED);
            nodeInstance.setEndTime(LocalDateTime.now());
            nodeInstanceRepository.save(nodeInstance);
            
            // 获取下一个节点
            ApprovalNodeDefinition nextNodeDef = getNextNode(nodeInstance.getNodeDefinition(), isApproved);
            
            if (nextNodeDef == null) {
                // 没有下一个节点，流程结束
                return completeProcess(processInstance, isApproved);
            } else {
                // 创建下一个节点实例
                ProcessNodeInstance nextNodeInstance = createNodeInstance(processInstance, nextNodeDef, nodeInstance);
                
                // 更新流程实例的当前节点
                processInstance.setCurrentNodeInstance(nextNodeInstance);
                ProcessInstance updatedInstance = processInstanceRepository.save(processInstance);
                
                // 如果下一个节点是条件节点，自动处理
                if (nextNodeDef.getNodeType() == NodeType.CONDITIONAL) {
                    return evaluateConditionalNode(updatedInstance, nextNodeInstance);
                }
                
                return modelMapper.map(updatedInstance, ProcessInstanceDTO.class);
            }
        }
        
        // 节点未完成，返回当前流程状态
        return modelMapper.map(processInstance, ProcessInstanceDTO.class);
    }
    
    // 检查节点是否已完成
    private boolean isNodeCompleted(ProcessNodeInstance nodeInstance, boolean isApproved) {
        // 获取节点定义
        ApprovalNodeDefinition nodeDef = nodeInstance.getNodeDefinition();
        
        // 节点类型和审批策略决定了节点完成的条件
        if (nodeDef.getNodeType() == NodeType.NORMAL) {
            if (nodeDef.getApprovalStrategy() == ApprovalStrategy.ANY) {
                // 任一人通过策略
                return isApproved;  // 只要有一个人同意，节点就完成
            } else {
                // 所有人通过策略
                if (!isApproved) {
                    return true;  // 有人拒绝，节点就完成（拒绝）
                }
                
                // 检查是否所有人都已审批通过
                Long pendingCount = approverInstanceRepository.countByNodeInstanceIdAndApprovalStatus(
                        nodeInstance.getId(), ApprovalStatus.PENDING);
                return pendingCount == 0;  // 没有待处理的审批人，节点就完成
            }
        } else if (nodeDef.getNodeType() == NodeType.PARALLEL) {
            // 并行节点需要所有分支都完成
            Long pendingCount = approverInstanceRepository.countByNodeInstanceIdAndApprovalStatus(
                    nodeInstance.getId(), ApprovalStatus.PENDING);
            return pendingCount == 0;
        } else {
            // 条件节点通常自动完成
            return true;
        }
    }
    
    // 获取下一个节点
    private ApprovalNodeDefinition getNextNode(ApprovalNodeDefinition currentNodeDef, boolean isApproved) {
        if (!isApproved) {
            // 如果不通过，流程结束，没有下一个节点
            return null;
        }
        
        // 查找所有节点
        List<ApprovalNodeDefinition> allNodes = nodeDefinitionRepository
                .findByProcessDefinitionIdOrderBySequenceNo(currentNodeDef.getProcessDefinition().getId());
        
        // 查找当前节点在序列中的位置
        int currentIndex = -1;
        for (int i = 0; i < allNodes.size(); i++) {
            if (allNodes.get(i).getId().equals(currentNodeDef.getId())) {
                currentIndex = i;
                break;
            }
        }
        
        if (currentIndex == -1 || currentIndex >= allNodes.size() - 1) {
            // 没有找到当前节点或当前节点是最后一个节点
            return null;
        }
        
        // 返回下一个节点
        return allNodes.get(currentIndex + 1);
    }
    
    // 完成流程
    private ProcessInstanceDTO completeProcess(ProcessInstance processInstance, boolean isApproved) {
        // 更新流程实例状态
        processInstance.setStatus(isApproved ? ProcessInstanceStatus.APPROVED : ProcessInstanceStatus.REJECTED);
        processInstance.setCompleteTime(LocalDateTime.now());
        processInstance.setUpdatedBy(getCurrentUserName());
        processInstance.setUpdatedTime(LocalDateTime.now());
        
        ProcessInstance updatedInstance = processInstanceRepository.save(processInstance);
        
        // 记录操作日志
        createOperationLog(updatedInstance, null, isApproved ? OperationType.APPROVE : OperationType.REJECT);
        
        return modelMapper.map(updatedInstance, ProcessInstanceDTO.class);
    }
    
    @Override
    public ProcessInstanceDTO getProcessInstance(Long processInstanceId) {
        ProcessInstance processInstance = processInstanceRepository.findById(processInstanceId)
                .orElseThrow(() -> new NotFoundException("流程实例不存在: " + processInstanceId));
        
        ProcessInstanceDTO result = modelMapper.map(processInstance, ProcessInstanceDTO.class);
        
        // 添加当前节点信息
        if (processInstance.getCurrentNodeInstance() != null) {
            CurrentNodeDTO currentNode = new CurrentNodeDTO();
            currentNode.setNodeInstanceId(processInstance.getCurrentNodeInstance().getId());
            currentNode.setNodeName(processInstance.getCurrentNodeInstance().getNodeName());
            currentNode.setNodeType(processInstance.getCurrentNodeInstance().getNodeDefinition().getNodeType());
            currentNode.setStatus(processInstance.getCurrentNodeInstance().getNodeStatus());
            
            // 添加审批人信息
            List<NodeApproverInstance> approvers = approverInstanceRepository
                    .findByNodeInstanceId(processInstance.getCurrentNodeInstance().getId());
            
            List<ApproverDTO> approverDTOs = approvers.stream()
                    .map(approver -> {
                        ApproverDTO dto = new ApproverDTO();
                        dto.setApproverInstanceId(approver.getId());
                        dto.setApproverId(approver.getApproverId());
                        dto.setApproverName(approver.getApproverName());
                        dto.setApprovalStatus(approver.getApprovalStatus());
                        dto.setDueTime(approver.getDueTime());
                        return dto;
                    })
                    .collect(Collectors.toList());
            
            currentNode.setApprovers(approverDTOs);
            result.setCurrentNode(currentNode);
        }
        
        return result;
    }
    
    @Override
    public List<ProcessInstanceDTO> getMyPendingTasks(Long approverId) {
        List<ProcessInstance> pendingTasks = processInstanceRepository.findPendingTasksByApproverId(
                approverId, ApprovalStatus.PENDING, ProcessInstanceStatus.IN_PROGRESS);
        
        return pendingTasks.stream()
                .map(instance -> modelMapper.map(instance, ProcessInstanceDTO.class))
                .collect(Collectors.toList());
    }
    
    @Override
    public List<ProcessInstanceDTO> getMyAppliedProcesses(Long applyUserId) {
        List<ProcessInstanceStatus> statuses = Arrays.asList(
                ProcessInstanceStatus.DRAFT,
                ProcessInstanceStatus.IN_PROGRESS,
                ProcessInstanceStatus.APPROVED,
                ProcessInstanceStatus.REJECTED,
                ProcessInstanceStatus.CANCELED,
                ProcessInstanceStatus.REWORK
        );
        
        List<ProcessInstance> processes = processInstanceRepository.findByApplyUserIdAndStatusIn(applyUserId, statuses);
        
        return processes.stream()
                .map(instance -> modelMapper.map(instance, ProcessInstanceDTO.class))
                .collect(Collectors.toList());
    }
    
    @Override
    public List<ApprovalRecordDTO> getProcessApprovalRecords(Long processInstanceId) {
        List<ApprovalRecord> records = approvalRecordRepository.findByProcessInstanceIdOrderByActionTimeDesc(processInstanceId);
        
        return records.stream()
                .map(record -> {
                    ApprovalRecordDTO dto = new ApprovalRecordDTO();
                    dto.setId(record.getId());
                    dto.setProcessInstanceId(record.getProcessInstance().getId());
                    dto.setNodeName(record.getNodeInstance().getNodeName());
                    dto.setApproverId(record.getApproverId());
                    dto.setApproverName(record.getApproverName());
                    dto.setActionType(record.getActionType());
                    dto.setActionComment(record.getActionComment());
                    dto.setActionTime(record.getActionTime());
                    dto.setTargetApproverName(record.getTargetApproverName());
                    return dto;
                })
                .collect(Collectors.toList());
    }
    
    // 验证操作DTO
    private void validateActionDTO(ApprovalActionDTO actionDTO) {
        if (actionDTO.getProcessInstanceId() == null) {
            throw new BusinessException("流程实例ID不能为空");
        }
        
        if (actionDTO.getNodeInstanceId() == null) {
            throw new BusinessException("节点实例ID不能为空");
        }
        
        if (actionDTO.getApproverInstanceId() == null) {
            throw new BusinessException("审批人实例ID不能为空");
        }
    }
    
    // 创建操作日志
    private void createOperationLog(
            ProcessInstance processInstance,
            ProcessNodeInstance nodeInstance,
            OperationType operationType) {
        
        ProcessOperationLog log = new ProcessOperationLog();
        log.setProcessInstance(processInstance);
        log.setNodeInstance(nodeInstance);
        log.setOperationType(operationType);
        log.setOperatorId(getCurrentUserId());
        log.setOperatorName(getCurrentUserName());
        log.setOperationTime(LocalDateTime.now());
        log.setCreatedBy(getCurrentUserName());
        log.setCreatedTime(LocalDateTime.now());
        operationLogRepository.save(log);
    }
    
    // 以下为模拟方法（在实际应用中，这些方法会连接到用户系统、权限系统等）
    
    private Long getCurrentUserId() {
        // 模拟当前用户ID
        return 1L;
    }
    
    private String getCurrentUserName() {
        // 模拟当前用户名
        return "当前用户";
    }
    
    private boolean isCurrentUserAdmin() {
        // 模拟检查当前用户是否是管理员
        return true;
    }
    
    private String getUserNameById(Long userId) {
        // 模拟根据用户ID获取用户名
        return "用户" + userId;
    }
    
    private List<ApproverInfo> getUsersByRole(String roleId) {
        // 模拟根据角色ID获取用户列表
        List<ApproverInfo> users = new ArrayList<>();
        users.add(new ApproverInfo(1L, "角色用户1"));
        users.add(new ApproverInfo(2L, "角色用户2"));
        return users;
    }
    
    private List<ApproverInfo> getUsersByDepartment(String departmentId) {
        // 模拟根据部门ID获取用户列表
        List<ApproverInfo> users = new ArrayList<>();
        users.add(new ApproverInfo(3L, "部门用户1"));
        users.add(new ApproverInfo(4L, "部门用户2"));
        return users;
    }
    
    private ApproverInfo getManagerByEmployeeId(Long employeeId) {
        // 模拟根据员工ID获取直接上级
        return new ApproverInfo(5L, "直接上级");
    }
    
    private ApproverInfo evaluateApproverExpression(String expression, ProcessInstance processInstance) {
        // 模拟解析表达式动态获取审批人
        if (expression.contains("直接主管")) {
            return new ApproverInfo(5L, "直接上级");
        } else if (expression.contains("部门经理")) {
            return new ApproverInfo(6L, "部门经理");
        } else {
            return new ApproverInfo(7L, "其他审批人");
        }
    }
    
    private boolean evaluateCondition(String conditionExpression, ProcessInstance processInstance) {
        // 模拟条件表达式的评估
        // 在实际应用中，这里应该使用规则引擎或脚本引擎解析和执行表达式
        return true;
    }
    
    private String generateProcessNo() {
        // 生成流程编号，格式：PR + 年月日 + 6位序列号
        LocalDateTime now = LocalDateTime.now();
        String prefix = "PR" + now.format(DateTimeFormatter.ofPattern("yyyyMMdd"));
        String suffix = String.format("%06d", (int) (Math.random() * 1000000));
        return prefix + suffix;
    }
    
    // 审批人信息类
    @Data
    @AllArgsConstructor
    private static class ApproverInfo {
        private Long id;
        private String name;
    }
}
```

## 7. 控制器

```java
// 流程定义控制器
@RestController
@RequestMapping("/api/v1/process-definitions")
public class ProcessDefinitionController {
    private final ProcessDefinitionService processDefinitionService;
    
    public ProcessDefinitionController(ProcessDefinitionService processDefinitionService) {
        this.processDefinitionService = processDefinitionService;
    }
    
    @PostMapping
    public ResponseEntity<ProcessDefinitionDTO> createProcessDefinition(@RequestBody ProcessDefinitionDTO definitionDTO) {
        ProcessDefinitionDTO createdDefinition = processDefinitionService.createProcessDefinition(definitionDTO);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdDefinition);
    }
    
    @PutMapping("/{id}")
    public ResponseEntity<ProcessDefinitionDTO> updateProcessDefinition(
            @PathVariable Long id,
            @RequestBody ProcessDefinitionDTO definitionDTO) {
        ProcessDefinitionDTO updatedDefinition = processDefinitionService.updateProcessDefinition(id, definitionDTO);
        return ResponseEntity.ok(updatedDefinition);
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProcessDefinition(@PathVariable Long id) {
        processDefinitionService.deleteProcessDefinition(id);
        return ResponseEntity.noContent().build();
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<ProcessDefinitionDTO> getProcessDefinition(@PathVariable Long id) {
        ProcessDefinitionDTO definition = processDefinitionService.getProcessDefinition(id);
        return ResponseEntity.ok(definition);
    }
    
    @GetMapping
    public ResponseEntity<List<ProcessDefinitionDTO>> getAllActiveProcessDefinitions() {
        List<ProcessDefinitionDTO> definitions = processDefinitionService.getAllActiveProcessDefinitions();
        return ResponseEntity.ok(definitions);
    }
    
    @GetMapping("/by-type/{typeCode}")
    public ResponseEntity<List<ProcessDefinitionDTO>> getProcessDefinitionsByType(@PathVariable String typeCode) {
        List<ProcessDefinitionDTO> definitions = processDefinitionService.getProcessDefinitionsByType(typeCode);
        return ResponseEntity.ok(definitions);
    }
    
    @PostMapping("/{id}/activate")
    public ResponseEntity<Void> activateProcessDefinition(@PathVariable Long id) {
        processDefinitionService.activateProcessDefinition(id);
        return ResponseEntity.ok().build();
    }
    
    @PostMapping("/{id}/deactivate")
    public ResponseEntity<Void> deactivateProcessDefinition(@PathVariable Long id) {
        processDefinitionService.deactivateProcessDefinition(id);
        return ResponseEntity.ok().build();
    }
}

// 流程引擎控制器
@RestController
@RequestMapping("/api/v1/processes")
public class ProcessEngineController {
    private final ProcessEngineService processEngineService;
    
    public ProcessEngineController(ProcessEngineService processEngineService) {
        this.processEngineService = processEngineService;
    }
    
    @PostMapping("/apply")
    public ResponseEntity<ProcessInstanceDTO> applyProcess(@RequestBody ProcessApplyDTO applyDTO) {
        ProcessInstanceDTO instance = processEngineService.startProcess(applyDTO);
        return ResponseEntity.status(HttpStatus.CREATED).body(instance);
    }
    
    @PostMapping("/{id}/submit")
    public ResponseEntity<ProcessInstanceDTO> submitProcess(@PathVariable Long id) {
        ProcessInstanceDTO instance = processEngineService.submitProcess(id);
        return ResponseEntity.ok(instance);
    }
    
    @PostMapping("/approve")
    public ResponseEntity<ProcessInstanceDTO> approveTask(@RequestBody ApprovalActionDTO actionDTO) {
        ProcessInstanceDTO instance = processEngineService.approveTask(actionDTO);
        return ResponseEntity.ok(instance);
    }
    
    @PostMapping("/reject")
    public ResponseEntity<ProcessInstanceDTO> rejectTask(@RequestBody ApprovalActionDTO actionDTO) {
        ProcessInstanceDTO instance = processEngineService.rejectTask(actionDTO);
        return ResponseEntity.ok(instance);
    }
    
    @PostMapping("/rework")
    public ResponseEntity<ProcessInstanceDTO> reworkTask(@RequestBody ApprovalActionDTO actionDTO) {
        ProcessInstanceDTO instance = processEngineService.reworkTask(actionDTO);
        return ResponseEntity.ok(instance);
    }
    
    @PostMapping("/transfer")
    public ResponseEntity<ProcessInstanceDTO> transferTask(@RequestBody ApprovalActionDTO actionDTO) {
        ProcessInstanceDTO instance = processEngineService.transferTask(actionDTO);
        return ResponseEntity.ok(instance);
    }
    
    @PostMapping("/{id}/cancel")
    public ResponseEntity<ProcessInstanceDTO> cancelProcess(
            @PathVariable Long id,
            @RequestParam String reason) {
        ProcessInstanceDTO instance = processEngineService.cancelProcess(id, reason);
        return ResponseEntity.ok(instance);
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<ProcessInstanceDTO> getProcessInstance(@PathVariable Long id) {
        ProcessInstanceDTO instance = processEngineService.getProcessInstance(id);
        return ResponseEntity.ok(instance);
    }
    
    @GetMapping("/my-pending-tasks")
    public ResponseEntity<List<ProcessInstanceDTO>> getMyPendingTasks(
            @RequestParam Long approverId) {
        List<ProcessInstanceDTO> tasks = processEngineService.getMyPendingTasks(approverId);
        return ResponseEntity.ok(tasks);
    }
    
    @GetMapping("/my-applied-processes")
    public ResponseEntity<List<ProcessInstanceDTO>> getMyAppliedProcesses(
            @RequestParam Long applyUserId) {
        List<ProcessInstanceDTO> processes = processEngineService.getMyAppliedProcesses(applyUserId);
        return ResponseEntity.ok(processes);
    }
    
    @GetMapping("/{id}/approval-records")
    public ResponseEntity<List<ApprovalRecordDTO>> getProcessApprovalRecords(@PathVariable Long id) {
        List<ApprovalRecordDTO> records = processEngineService.getProcessApprovalRecords(id);
        return ResponseEntity.ok(records);
    }
}
```

## 8. 异常处理

```java
// 业务异常类
public class BusinessException extends RuntimeException {
    public BusinessException(String message) {
        super(message);
    }
    
    public BusinessException(String message, Throwable cause) {
        super(message, cause);
    }
}

// 资源未找到异常类
public class NotFoundException extends RuntimeException {
    public NotFoundException(String message) {
        super(message);
    }
}

// 全局异常处理器
@RestControllerAdvice
public class GlobalExceptionHandler {
    
    @ExceptionHandler(NotFoundException.class)
    public ResponseEntity<ErrorResponse> handleNotFoundException(NotFoundException ex) {
        ErrorResponse error = new ErrorResponse("NOT_FOUND", ex.getMessage());
        return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
    }
    
    @ExceptionHandler(BusinessException.class)
    public ResponseEntity<ErrorResponse> handleBusinessException(BusinessException ex) {
        ErrorResponse error = new ErrorResponse("BUSINESS_ERROR", ex.getMessage());
        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    }
    
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleGlobalException(Exception ex) {
        ErrorResponse error = new ErrorResponse("INTERNAL_SERVER_ERROR", "服务器内部错误");
        return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR);
    }
    
    @Data
    @AllArgsConstructor
    public static class ErrorResponse {
        private String code;
        private String message;
    }
}
```

## 9. 应用程序配置

```java
// 应用程序主类
@SpringBootApplication
public class CreditOfficerPromotionApplication {
    
    public static void main(String[] args) {
        SpringApplication.run(CreditOfficerPromotionApplication.class, args);
    }
    
    @Bean
    public ModelMapper modelMapper() {
        ModelMapper modelMapper = new ModelMapper();
        // 配置映射规则
        return modelMapper;
    }
}

// 数据库配置
@Configuration
@EnableJpaRepositories("com.example.repository")
@EntityScan("com.example.entity")
public class DatabaseConfig {
    
    @Bean
    public LocalContainerEntityManagerFactoryBean entityManagerFactory(
            DataSource dataSource, 
            JpaVendorAdapter jpaVendorAdapter) {
        
        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
        em.setDataSource(dataSource);
        em.setPackagesToScan("com.example.entity");
        em.setJpaVendorAdapter(jpaVendorAdapter);
        
        return em;
    }
    
    @Bean
    public JpaVendorAdapter jpaVendorAdapter() {
        HibernateJpaVendorAdapter adapter = new HibernateJpaVendorAdapter();
        adapter.setDatabase(Database.ORACLE);
        adapter.setShowSql(true);
        adapter.setGenerateDdl(false);
        adapter.setDatabasePlatform("org.hibernate.dialect.Oracle12cDialect");
        
        return adapter;
    }
    
    @Bean
    public PlatformTransactionManager transactionManager(EntityManagerFactory emf) {
        JpaTransactionManager txManager = new JpaTransactionManager();
        txManager.setEntityManagerFactory(emf);
        return txManager;
    }
}
```

## 10. 应用程序属性文件

```properties
# application.properties
spring.application.name=credit-officer-promotion
server.port=8080

# 数据源配置
spring.datasource.url=jdbc:oracle:thin:@//localhost:1521/XE
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

# JPA配置
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle12cDialect

# 日志配置
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.com.example=DEBUG

# 连接池配置
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=30000
```

## 总结


1. **数据库设计**：定义了流程定义、节点定义、审批人定义、流程实例、节点实例、审批人实例、审批记录和操作日志等表结构。

2. **核心功能实现**：
   - 流程定义管理
   - 流程实例创建与提交
   - 多种审批节点类型（普通、并行、条件）
   - 灵活的审批人配置
   - 审批处理（同意、拒绝、退回重做、转交）
   - 流程取消
   - 审批记录查询

3. **特色功能**：
   - 申请人可以在提交前预选审批人
   - 支持并行审批节点
   - 支持条件分支路径
   - 支持多种审批策略（所有人通过、任一人通过）
   - 支持审批任务转交
   - 完整的操作日志

